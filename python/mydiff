diff --git a/python/aoc/year2022/day14/prod.py b/python/aoc/year2022/day14/prod.py
index 956a46b..0bd7262 100644
--- a/python/aoc/year2022/day14/prod.py
+++ b/python/aoc/year2022/day14/prod.py
@@ -1,31 +1,27 @@
-def pour(cavemap):
-    (x, y) = (500, 0)
+from aoc.utils import *
+
+def pour(M):
+    p = V(500,0)
     while True:
-        if y == len(cavemap)-1:
+        if p.y == M.minmaxy[1]-1:
             return None
-        if cavemap[y+1][x] == ' ':
-            y += 1
-            continue
-        elif cavemap[y+1][x] in ['#', 'o']:
-            if cavemap[y+1][x-1] == ' ':
-                x, y = x-1, y+1
-                continue
-            else:
-                if cavemap[y+1][x+1] == ' ':
-                    x, y = x+1, y+1
-                    continue
-                else:
-                    cavemap[y][x] = 'o'
-                    return (x, y)
 
-def printCaveMap(cavemap):
-    for l in cavemap:
-        print(''.join(l[400:600]))
+        moved = False
+        for d in [V(0, 1), V(-1, 1), V(1, 1)]:
+            v = M[p+d]
+            if v == ' ':
+                p += d
+                moved = True
+                break
+
+        if not moved:
+            M[p] = 'o'
+            return p
 
 def partA(filename: str) -> int:
     lines = getLines(filename)
 
-    cavemap = getCavemap(lines)
+    cavemap, minx, miny, maxx, maxy = getCavemap(lines)
 
     i = 1
     while True:
@@ -37,46 +33,35 @@ def partA(filename: str) -> int:
 def getCavemap(lines):
     walls = []
     for l in lines:
-        points = map(lambda s:s.strip(), l.split(' -> '))
-        points = map(lambda s:s.split(','), points)
-        points = map(lambda x:(int(x[0]), int(x[1])), points)
+        points = list(map(V, chunkBySize(ints(l), 2)))
         walls += [list(points)]
 
-    minx = 0
-    miny = 0
-    maxx = 0
-    maxy = 0
+    minx, miny = 0, 0
+    maxx, maxy = 0, 0
     for wall in walls:
         for (x, y) in wall:
             maxx = max(maxx, x)
             maxy = max(maxy, y)
 
-    cavemap = []
-
-    for y in range(maxy + 2):
-        cavemap.append([' '] * (maxx*2))
+    cavemap = createEmptyMap(maxx*2, maxy*2, fill=' ')
 
     for wall in walls:
         start = wall[0]
         for end in wall[1:]:
-            if start[0] == end[0]:
-                d = (end[1] - start[1]) // abs(start[1] - end[1])
-                for y in range(start[1], end[1] + d, d):
-                    cavemap[y][start[0]] = '#'
-            elif start[1] == end[1]:
-                d = (end[0] - start[0]) // abs(start[0] - end[0])
-                for x in range(start[0], end[0] + d, d):
-                    cavemap[start[1]][x] = '#'
+            for p in line(start, end):
+                cavemap[p] = '#'
             start = end
-    return cavemap
+
+    return cavemap, minx, miny, maxx, maxy
 
 def partB(filename: str) -> int:
     lines = getLines(filename)
 
-    cavemap = getCavemap(lines)
+    cavemap, minx, miny, maxx, maxy = getCavemap(lines)
 
     # Add the floor
-    cavemap += [['#'] * len(cavemap[0])]
+    for x in cavemap.xrange():
+        cavemap[(x, maxy+2)] = '#'
 
     i = 1
     while True:
@@ -84,17 +69,4 @@ def partB(filename: str) -> int:
         # If it settles right where it comes out, we're done
         if p == (500,0):
             return i
-        i += 1
-
-def getLines(filename: str) -> list:
-    lines = []
-    with open(filename) as f:
-        for l in f:
-            l = l.rstrip('\n')
-            lines += [l]
-    return lines
-
-if __name__ == '__main__':
-    import os.path
-    print(partA(get_data_file_path('input.txt')))
-    print(partB(get_data_file_path('input.txt')))
+        i += 1
\ No newline at end of file
